def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_build_appbundle_error"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        // flutter 多 dimension 支持有 bug
        // https://github.com/flutter/flutter/issues/52905
        variant.assemble.doLast {
            def apkFile = variant.outputs.first().outputFile as File
            System.out.println("----------------------------------------------------------------------------------------")
            System.out.println("apk file: ${apkFile.path}")
            System.out.println("----------------------------------------------------------------------------------------")
            def flavorNames = variant.productFlavors.collect{flavor -> flavor.name}.toList()
            System.out.println("----------------------------------------------------------------------------------------")
            System.out.println("flavorNames: ${flavorNames.join('-')}")
            System.out.println("----------------------------------------------------------------------------------------")
            def targetApkFile = new File(apkFile.parentFile.path, "app-${flavorNames.withIndex().collect{flavorName, index -> index == 0 ? flavorName : flavorName.capitalize()}.join('')}-${variant.buildType.name}.aab")
            System.out.println("----------------------------------------------------------------------------------------")
            System.out.println("target apk file: ${targetApkFile.path}")
            System.out.println("----------------------------------------------------------------------------------------")
            exec {
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html
                    commandLine 'cmd', '/c', "copy ${apkFile.path} ${targetApkFile.path}"
                } else {
                    commandLine 'bash', '-lc', "cp ${apkFile.path} ${targetApkFile.path}"
                }
            }
        }
    }
    
    flavorDimensions "signed", "env"

    productFlavors {
        signed {
        dimension "signed"
        signingConfig signingConfigs.debug
        }

        unsigned {
        dimension "signed"
        }

        prod {
        dimension "env"
        resValue "string", "app_name", "Build Appbundle Error" // THE NAME OF THE APP AS SEEN ON DEVICE
        }

        internal {
        dimension "env"
        applicationIdSuffix ".internal"
        versionNameSuffix "-internal"
        resValue "string", "app_name", "Build Appbundle Error (int)"
        }
    }

    
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
